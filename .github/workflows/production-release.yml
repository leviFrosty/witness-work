name: Production Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  production-build:
    name: EAS Production Build & Submit
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: Production
    steps:
      - name: Check for EXPO_TOKEN
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          if [ -z "$EXPO_TOKEN" ]; then
            echo "You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.14.0
          cache: pnpm

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: pnpm install

      - name: Run lint
        run: pnpm run lint

      - name: Run typecheck
        run: pnpm run typecheck

      - name: Run tests
        run: pnpm run testFinal

      - name: Check for circular dependencies
        run: pnpm run deps

      - name: Build and submit iOS to App Store
        run: eas build --platform ios --profile production --auto-submit --non-interactive --no-wait

      - name: Build and submit Android to Play Store
        run: eas build --platform android --profile production --auto-submit --non-interactive --no-wait

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            const version = tag.replace('v', '');

            // Get the previous release to compare commits
            let previousTag = null;
            try {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 1
              });
              if (releases.data.length > 0) {
                previousTag = releases.data[0].tag_name;
              }
            } catch (error) {
              console.log('No previous releases found');
            }

            // Get commits since last release
            let commits = [];
            if (previousTag) {
              const comparison = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: previousTag,
                head: tag
              });
              commits = comparison.data.commits;
            } else {
              // If no previous release, get recent commits
              const commitsResponse = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: tag,
                per_page: 20
              });
              commits = commitsResponse.data;
            }

            // Format commits into changelog
            const changelog = commits
              .map(commit => {
                const message = commit.commit.message.split('\n')[0];
                const sha = commit.sha.substring(0, 7);
                return `- ${message} (${sha})`;
              })
              .join('\n');

            const body = `### Changes${previousTag ? ` since ${previousTag}` : ''}
            ${changelog || 'No changes recorded'}`;

            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Release ${version}`,
              body: body,
              draft: false,
              prerelease: false
            });
